diff --git a/examples/builtin.qnt b/examples/builtin.qnt
index d955117..2a08323 100644
--- a/examples/builtin.qnt
+++ b/examples/builtin.qnt
@@ -1,48 +1,57 @@
 module builtin {
-  // The infinite set of all natural numbers
+  /// The infinite set of all natural numbers
+  ///
+  /// Some operators cannot be applied to inifine sets.
   pure val Nat: Set[int]

-  // The infinite set of all integers
+  /// The infinite set of all integers
+  ///
+  /// Some operators cannot be applied to inifine sets.
   pure val Int: Set[int]

-  // The set of all booleans
-  // That is, Set(false, true)
+  /// The set of all booleans
+  /// That is, Set(false, true)
   pure val Bool: Set[bool]

-  /// Tests for equality between two values of the same type.
+  /// `a.eq(b)` is `true` when `a` and `b` are equal values of the same type.
   /// It can be used in the infix form as `==` or as a named operator `eq`.
   pure def eq(a, b): (t, t) => bool

-  /// Tests for inequality between two values of the same type.
+  /// `a.neq(b)` is `true` when `a` and `b` are not equal values of the same type.
   /// It can be used in the infix form as `!=` or as a named operator `neq`.
   pure def neq(a, b): (t, t) => bool

-  /// Tests for equivalence between two boolean values.
+  /// `p.iff(q)` is `true` when `p` and `q` are equal values of the bool type.
+  ///
+  /// This is the logical equivalence operator.
   ///
   /// # Examples
   ///
   /// ```
   /// assert(iff(true, true))
   /// assert(iff(false, false))
-  /// assert(!iff(true, false))
-  /// assert(!iff(false, true))
+  /// assert(not(iff(true, false)))
+  /// assert(not(iff(false, true)))
   /// ```
   pure def iff(p, q): (bool, bool) => bool

-  /// Tests for material implication between two boolean values.
-  /// That is, `p implies q` iff `not(p) or q`.
+  /// `p.implies(q)` is true when `not(p) or q` is true.
+  ///
+  /// This is the material implication operator.
   ///
   /// # Examples
   ///
   /// ```
-  ///   assert(implies(true, true))
-  ///   assert(!implies(true, false))
-  ///   assert(implies(false, true))
-  ///   assert(implies(false, false))
+  /// assert(true.implies(true))
+  /// assert(false.implies(false))
+  /// assert(not(true.implies(false)))
+  /// assert(not(false.implies(true)))
   /// ```
   pure def implies(p, q): (bool, bool) => bool

-  /// Negates a boolean value.
+  /// `not(p)` is `true` when `p` is `false`.
+  ///
+  /// This is the negation opearator.
   pure def not(a): (bool) => bool

   /// Guess a value from the given set that satisfies the given predicate.
@@ -52,31 +61,37 @@ module builtin {
   ///
   /// # Examples
   /// ```
-  ///   var x: int
-  ///   run a = Set(1, 2, 3).guess(n => x' = n).then(assert(x.in(Set(1, 2, 3))))
+  /// var x: int
+  /// run a = Set(1, 2, 3).guess(n => x' = n).then(assert(x.in(Set(1, 2, 3))))
   /// ```
   pure def guess(a, p): (Set[a], (a) => bool) => bool

-  /// Tests if there exists an element in the given set that satisfies the given predicate.
-  /// Similar to `guess` but pure and deterministic
+  /// `s.exists(p)` is true when there is an element in `s` that satisfies `p`.
+  /// Similar to `guess` but pure and deterministic.
+  ///
+  /// This is the existential quantifier.
   ///
   /// # Examples
   /// ```
-  ///   assert(Set(1, 2, 3).exists(n => n == 2))
-  ///   assert(!Set(1, 2, 3).exists(n => n == 4))
+  /// assert(Set(1, 2, 3).exists(n => n == 2))
+  /// assert(not(Set(1, 2, 3).exists(n => n == 4)))
   /// ```
   pure def exists(a, p): (Set[a], (a) => bool) => bool

-  /// Tests if all elements in the given set satisfy the given predicate.
+  /// `s.forall(p)` is true when all elements in `s` satisfy `p`.
+  ///
+  /// This is the universal quantifier.
   ///
   /// # Examples
   /// ```
-  ///   assert(Set(1, 2, 3).forall(n => n > 0))
-  ///   assert(!Set(1, 2, 3).forall(n => n > 1))
+  /// assert(Set(1, 2, 3).forall(n => n > 0))
+  /// assert(not(Set(1, 2, 3).forall(n => n > 1)))
   /// ```
   pure def forall(a, p): (Set[a], (a) => bool) => bool

-  /// Tests if the given element is in the given set.
+  /// `e.in(s)` is true when the element `e` is in the set `s`.
+  ///
+  /// This is the set membership relation.
   /// See also: `contains`
   ///
   /// # Examples
@@ -86,7 +101,9 @@ module builtin {
   /// ```
   pure def in(a, s): (a, Set[a]) => bool

-  /// Tests if the given element is in the given set.
+  /// `s.contains(e)` is true when the element `e` is in the set `s`.
+  ///
+  /// This is the set membership relation.
   /// See also: `in`
   ///
   /// # Examples
@@ -96,7 +113,8 @@ module builtin {
   /// ```
   pure def contains(a, s): (Set[a], a) => bool

-  /// Tests if the given element is not in the given set.
+  /// `e.notin(s)` is true when the element `e` is not in the set `s`.
+  ///
   /// See also: `in`
   ///
   /// # Examples
@@ -106,7 +124,9 @@ module builtin {
   /// ```
   pure def notin(a, s): (a, Set[a]) => bool

-  /// Returns the union of the two given sets.
+  /// `s1.union(s2)` is the set of elements that are in `s1` or in `s2`.
+  ///
+  /// This is the set union operator.
   ///
   /// # Examples
   /// ```
@@ -114,7 +134,9 @@ module builtin {
   /// ```
   pure def union(s1, s2): (Set[a], Set[a]) => Set[a]

-  /// `s1.intersect(s2)` is the intersection of the sets `s1` and `s2`.
+  /// `s1.intersect(s2)` is the set of elements that are in both sets `s1` and `s2`.
+  ///
+  /// This is the set intersection operator.
   ///
   /// # Examples
   /// ```
@@ -122,7 +144,9 @@ module builtin {
   /// ```
   pure def intersect(s1, s2): (Set[a], Set[a]) => Set[a]

-  /// Returns the set of elements in the first set that are not in the second set.
+  /// `s1.exclude(s2)` is the set of elements in `s1` that are not in `s2`.
+  ///
+  /// This is the set difference operator.
   ///
   /// # Examples
   /// ```
