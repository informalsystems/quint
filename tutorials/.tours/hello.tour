{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "Lesson 0 - Hello, world!",
  "steps": [
    {
      "title": "Introduction",
      "description": "\nThis lesson introduces the standard \"Hello, world!\" example.\nSince Quint is designed for distributed protocols, we introduce\na barebone protocol, instead of just printing \"Hello, world\".\n\nIn our protocol, two parties are communicating:\n\n - the computer that outputs \"Hello, world!\" to the console, and\n - the user who reads \"Hello, world!\" from the console.\n\nWe describe the protocol in terms of a state machine. This means\nthat we have to describe two importants aspects of the protocol:\n\n - What constitutes a state of the state machine.\n - What kinds of transitions can be made by the state machine.\n\n          \n          ",
      "line": 4,
      "file": "lesson0-helloworld/hello.qnt"
    },
    {
      "title": "Declare a module",
      "description": "\nAs a first necessary step, we declare a top-level module for our protocol.\n        ",
      "line": 5,
      "file": "lesson0-helloworld/hello.qnt"
    },
    {
      "title": "Introduce state variables",
      "description": "\nThe main purpose of Quint is to code a distributed protocol as a state machine.\nSince different protocols may output \"Hello, world!\" differently, Quint does not\nhave any printing facilities like `print(...)` or `console.log(...)`. In our\nprotocol, we opt to simply store the output in the variable called `consoleOutput`.\n\nOnce introduced, this variable becomes an integral part of the state. Hence, we have to\ntake care of it, when the state machine makes a transition from one state to another.\n\nAll state variables require a type. We use `str`, that is, the string type.\n        ",
      "line": 8,
      "file": "lesson0-helloworld/hello.qnt"
    },
    {
      "title": "Introduce state variables",
      "description": "\nThe output does not have to be immediately consumed by the user. Hence, we introduce\nanother state variable called `readByUser`, which will store the last output read\nby the user. This state variable has the string type too.\n        ",
      "line": 11,
      "file": "lesson0-helloworld/hello.qnt"
    },
    {
      "title": "Introduce an initializer",
      "description": "\nSince we are writing distributed protocols in Quint, there is no\nreasonable default for initializing a distributed protocol. This means\nthat we have to think about protocol initialization and write an\ninitialization action.\n\nThis is what we do in the action called `init`. Let's break down\nwhat is going on here. We have two assignments to state variables:\n\n 1. `consoleOutput' = \"\"`\n 2. `readByUser' = \"\"`\n\nThese two assignments are executed in no particular order. In fact,\nyou can imagine that they are executed in any order:\n\n  - 1, then 2\n  - 2, then 1\n  - 1 and 2 at the same time\n\nOnce finished, every assignment records the value of its left-hand side\nfor the next state, and the assignment unconditionally returns the result `true`.\nImportantly, the assignments do not update the values of `consoleOutput`\nand `readByUser` immediately.\n\nOnce both assignments are finished, the operator `all {...}` is finished,\nand it returns `true` (since both assignments returned `true`).\nAs a result, the whole action `init` returns the result `true`.\nWhen `init` is executed as a top-level action, it transitions the state\nmachine from whatever state it was in to the state where `consoleOutput = \"\"`\nand `readByUser = \"\"`.\n\nIf you think that the above behavior of assignments is a bit silly,\nread the next step.\n        ",
      "line": 17,
      "file": "lesson0-helloworld/hello.qnt"
    },
    {
      "title": "Introduce an action by the computer",
      "description": "\n\nNow it's time to print the \"Hello, world!\" message. Similar to `init`, we\nintroduce the action `write`. In contrast to `init`, this action cannot be\nunconditionally executed in any state of our state machine.  Similar to how the\nvariable `consoleOutput` is updated in the action `init`, you should be able to\nsee how the action `write` schedules an update of `consoleOutput` in the next\nstate. This only happens though, if the action `write` returns `true`.\n\nThe first statement of `write` may be confusing to you though:\n\n```scala\n  consoleOutput == \"\"\n```\n\nIf you are familiar with C, Java, JavaScript and similar languages, this\nstatement looks useless, as in those languages such an expression would be\nevaluated and its result would be simply dropped. Moreover, in a static\nlanguage such a statement could be simply removed by the compiler as\nfruitless at the optimization stage.\n\nIn Quint, things are a bit different. Recall the discussion about the\naction `init` at the previous step. Assignments return `true` and\n`all { ... }` returns true only if all of its arguments return `true`.\nThe same principle applies to the expression `consoleOutput == \"\"`.\nIf `consoleOutput == \"\"` evaluates to `true` in the current state\nof the state machine, then the enclosing expression `all { ... }`\nevaluates to `true`, and only then the action `write` evaluates to `true`\nand it may produce the next state.\n\nFinally, the third statement may look useless to you too:\n\n```scala\n  readByUser' = readByUser,\n```\n\nWhy shall we say that `readByUser` keeps its value in the next state?\nMost likely, we will be able to automatically infer this in the future.\nIn the current version of Quint, if an action is used to execute transitions,\nit has to explicitely assign values to all of the state variables.\n        ",
      "line": 25,
      "file": "lesson0-helloworld/hello.qnt"
    },
    {
      "title": "Introduce an action by the user",
      "description": "\nIf you understood the behavior of `write`, it should be easy to see\nwhat is happening in the action `read`.\n\n**Exercise:** Try to spell out the behavior of `read` similar to\nhow we did it for `write`.\n        ",
      "line": 33,
      "file": "lesson0-helloworld/hello.qnt"
    },
    {
      "title": "Describe a single step",
      "description": "\n\nWe have described `init`, `read`, and `write`. These are the essential actions\nfor understanding our protocol. However, we have to also understand *when* the\nactions may be executed. We do this by composing `read` and `write` into the\naction called `step`.\n\nThe operator `any { ... }` looks similar to `all { ... }`. Indeed, they are of\nthe same nature. While the operator `all { ... }` returns `true` if and only if\nall of its arguments return `true`, the operator `any` returns `true` if and\nonly if at least one of its arguments returns `true`. Moreover, `any { ... }`\nexecutes only one of its arguments that evaluate to `true`. That is, if several\nactions (like `read` and `write`) can be executed in the same state, `any { ... }`\nwould pick one of them and execute it.\n\nThere is no particular way of choosing among simultaneously enabled actions.\nYou can imagine that they are picked at random, and they are indeed picked at random\nby the random simulator of Quint. However, when we describe a distributed protocol,\nwe should not rely on probabilistic guarantees offered by random choice, unless\nwe know the probability distribution in our protocol for sure. Hence, we say\nthat `any { ... }` chooses one of the actions *non-deterministically*.\n        ",
      "line": 40,
      "file": "lesson0-helloworld/hello.qnt"
    },
    {
      "title": "Introduce a simple test",
      "description": "\nWe have written all the important parts of our protocol. It would be nice not\nto only read the code, but also to execute it somehow. After all, this is what\nwe normally do with the code.\n\nSince we are specifying a distributed protocol, there may be many ways to\nexecute actions in different orders. In general, it is not even always clear,\nwhether our protocol has terminated or not. Luckily, our protocol is quite simple.\n\nTo test our protocol, we fix one particular execution sequence in `writeReadTest`:\n\n 1. Execute the initialization action `init`.\n 2. Execute the action `write`.\n 3. Execute the action `read`.\n\nWe could draw this execution sequence with UML sequence diagrams or state\ndiagrams. For example:\n\n![test1-sequence](../img/hello-test1.png)\n\nThe unfortunate fact about UML sequence diagrams and state charts is that they\nare given as figures, which have to be executed in the reader's brain.\n\nIn Quint, running `writeReadTest` is as simple as evaluating an expression. To try it\nout, run the command `quint`, which starts a REPL session, and execute the\nfollowing commands (written after the REPL prompt `>>> `):\n\n```sh\n$ quint -r hello.qnt\nQuint REPL v0.0.3\nType \".exit\" to exit, or \".help\" for more information\n>>> import hello.*\n\n>>> writeReadTest\ntrue\n```\n\nIn the above session, we load the module `hello` from the file `hello.qnt`,\nimport all definitions from the module `hello` and execute the run\n`writeReadTest`. As indicated with the result `true`, the run was executed\nsuccessfully. We can also evaluate the state variables `consoleOutput` and\n`readByUser` in the state produced by `writeReadTest`:\n\n```sh\n>>> consoleOutput\n\"Hello, world!\"\n>>> readByUser\n\"Hello, world!\"\n```\n\nRunning tests by hand in REPL may quickly become tedious. To automate that,\nuse the `test` command:\n\n            \n>> quint test ./lesson0-helloworld/hello.qnt\n\n\n\n**Exercise:** Carefully read the code of `read` and `write` again. Explain,\nwhether it is possible to execute `read` and `write` in the same state.\n\n**Exercise:** Explain, whether it is possible to execute `read` or `write`\nafter executing the run called `writeReadTest`.\n            ",
      "line": 44,
      "file": "lesson0-helloworld/hello.qnt"
    },
    {
      "title": "Suming it up",
      "description": "\nWe have covered all the aspects of our \"Hello, world!\" example.\nActually, we could have written a much shorter example, but it would not\ndemonstrate the distinctive features of Quint. If you look at the\nsource code of [hello.qnt](./hello.qnt), it is not scary long.\n\nWe are experimenting with different kinds of tutorials.\nIt would be great to learn, whether you liked this tutorial format, or not.\nPlease vote in the\n[discussion](https://github.com/informalsystems/quint/discussions/509).\n        ",
      "line": 44,
      "file": "lesson0-helloworld/hello.qnt"
    }
  ]
}