{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "Lesson 1 - Booleans",
  "steps": [
    {
      "title": "Introduction",
      "description": "In this lesson, you will learn how to use Booleans. It should take you real quick to learn this lesson.\n\n**Do not skip this lesson**. It introduces a few important language concepts, not just the Booleans."
    },
    {
      "file": "lesson1-booleans/booleans.tnt",
      "description": "`false` is a built-in value in the language. You cannot modify it, and you cannot do much about it, except carrying it around as a variable value, or using it in data structures.",
      "line": 14
    },
    {
      "file": "lesson1-booleans/booleans.tnt",
      "description": "Now it is a good time to start experimenting with Booleans. Click on the link below to compute the value of `false`:\n\n>> echo \"false\" | tntc\n\nYou should see the following output:\n\n```scala\nTNT REPL v0.0.3\nType \".exit\" to exit, or \".help\" for more information\n>>> false\nfalse\n```\n\nAs you see, `false` evaluates to `false`. No big surprise.",
      "line": 16
    },
    {
      "file": "lesson1-booleans/booleans.tnt",
      "description": "As you have guessed, if there is `false`, there must be `true` too. Click on the link below to see what it evaluates too:\n\n>> echo \"true\" | tntc",
      "line": 19
    },
    {
      "file": "lesson1-booleans/booleans.tnt",
      "description": "We can compare Booleans for equality. The rules for equality are straightforward.\n\n - What is the result of `false == false`? Try it:\n\n>> echo \"false == false\" | tntc\n\n - What is the result of `true == true`? Try it:\n\n>> echo \"true == true\" | tntc\n\n - What is the result of `false == true`? Try it:\n\n>> echo \"false == true\" | tntc\n\n - What is the result of `true == false`? Try it:\n\n>> echo \"true == false\" | tntc\n\nOne important feature of equality is that the arguments should have the same type. Hence, Booleans can be only compared to Booleans. The following expressions produces type errors. Try them:\n\n>> echo \"false == 0\" | tntc\n\n>> echo \"true == 1\" | tntc\n",
      "line": 22
    },
    {
      "file": "lesson1-booleans/booleans.tnt",
      "description": "We can compare Booleans for inequality. It is simply the opposite of `x == y`.\n\n - What is the result of `false != false`? Try it:\n\n>> echo \"false != false\" | tntc\n\n - What is the result of `true != true`? Try it:\n\n>> echo \"true != true\" | tntc\n\n - What is the result of `false != true`? Try it:\n\n>> echo \"false != true\" | tntc\n\n - What is the result of `true != false`? Try it:\n\n>> echo \"true != false\" | tntc\n\nOne important feature of equality is that the arguments should have the same type. Hence, Booleans can be only compared to Booleans. The following expressions produces type errors. Try them:\n\n>> echo \"false != 0\" | tntc\n\n>> echo \"true != 1\" | tntc\n",
      "line": 25
    },
    {
      "file": "lesson1-booleans/booleans.tnt",
      "description": "The simplest operation we can do with a Boolean value is negation.\n\n - What is the value of `not(false)`? Click below to see the answer:\n\n>> echo \"not(false)\" | tntc\n\n - What is the value of `not(true)`? Click below to see the answer:\n\n>> echo \"not(true)\" | tntc\n",
      "line": 28
    },
    {
      "file": "lesson1-booleans/booleans.tnt",
      "description": "If you prefer object-oriented style, you can also write `x.not()`. Try it out:\n\n>> echo \"false.not()\" | tntc\n\nThis is a general principle. You can write `foo(x)` as `x.foo()` and vice versa.\n\nBe careful about not writing `false.not`, as it would be understood as record access:\n\n>> echo \"false.not\" | tntc",
      "line": 31
    },
    {
      "file": "lesson1-booleans/booleans.tnt",
      "description": "Now it is time to learn about Boolean \"and\".\n\n - What is the result of `false and false`? Click below to see the answer:\n\n>> echo \"false and false\" | tntc\n\n - What is the result of `false and true`? Click below to see the answer:\n\n>> echo \"false and true\" | tntc\n\n - What is the result of `true and false`? Click below to see the answer:\n\n>> echo \"true and false\" | tntc\n\n - What is the result of `true and true`? Click below to see the answer:\n\n>> echo \"true and true\" | tntc\n\nIt's not rocket science, is it?",
      "line": 34
    },
    {
      "file": "lesson1-booleans/booleans.tnt",
      "description": "Similar to `not`, you can use the object-oriented form for Boolean \"and\". It works:\n\n>> echo \"false.and(true)\" | tntc\n\nAgain, this is a general principle. You can replace `bar(x, y)` with `x.bar(y)` and vice versa.\n\nThis form may be useful with nested formulas like:\n\n```\nx.and(y).and(z)\n```",
      "line": 37
    },
    {
      "file": "lesson1-booleans/booleans.tnt",
      "description": "As you see, \"and\" does not have to apply to two arguments only. You can use it with multiple arguments.",
      "line": 40
    },
    {
      "file": "lesson1-booleans/booleans.tnt",
      "description": "Sometimes, we have to write complex expressions over Booleans. Yeah, that happens.\n\nIn this case, you can use the convenient form `and { ... }`, which is just syntax sugar for `and(...)`.",
      "line": 47
    },
    {
      "file": "lesson1-booleans/booleans.tnt",
      "description": "If there is \"and\", there must be \"or\".\n\n - What is the result of `false or false`? Click below to see the answer:\n\n>> echo \"false or false\" | tntc\n\n - What is the result of `false or true`? Click below to see the answer:\n\n>> echo \"false or true\" | tntc\n\n - What is the result of `true or false`? Click below to see the answer:\n\n>> echo \"true or false\" | tntc\n\n - What is the result of `true or true`? Click below to see the answer:\n\n>> echo \"true or true\" | tntc\n",
      "line": 50
    },
    {
      "file": "lesson1-booleans/booleans.tnt",
      "description": "Similar to \"and\", we have convenience forms for \"or\". You got it.",
      "line": 53
    },
    {
      "file": "lesson1-booleans/booleans.tnt",
      "description": "Perhaps, you remember Boolean implication from your math classes. In some languages, it is written as `x -> y` or `x => y`.\n\n*If you don't like it, you don't have to use it*: `x implies y` is equivalent to `not(x) or y`.\n\n - What is the result of `false implies false`? Try it:\n\n>> echo \"false implies false\" | tntc\n\n - What is the result of `true implies true`? Try it:\n\n>> echo \"true implies true\" | tntc\n\n - What is the result of `true implies false`? Try it:\n\n>> echo \"true implies false\" | tntc\n\n - Perhaps, the least intuitive one. What is the result of `false implies true`? Try it:\n\n>> echo \"false implies true\" | tntc",
      "line": 67
    },
    {
      "file": "lesson1-booleans/booleans.tnt",
      "description": "Finally, we have the equivalence operator `x iff y`. It is really like `x == y`, but it does a bit more: It requires `x` and `y` to be Booleans.\n\nWhat is it is good for? If you know what protocol invariants are, `x iff y` looks nice when writing invariants. If you are not familiar with invariants, don't worry.\n\n - What is the result of `false iff false`? Try it:\n\n>> echo \"false iff false\" | tntc\n\n - What is the result of `true iff true`? Try it:\n\n>> echo \"true iff true\" | tntc\n\n - What is the result of `false iff true`? Try it:\n\n>> echo \"false iff true\" | tntc\n\n - What is the result of `true iff false`? Try it:\n\n>> echo \"true iff false\" | tntc\n",
      "line": 72
    },
    {
      "file": "lesson1-booleans/booleans.tnt",
      "description": "Congratulations! Now you know Booleans and operators over them!",
      "line": 1
    }
  ]
}
