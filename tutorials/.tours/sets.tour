{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "Lesson 4 - Fun with sets",
  "steps": [
    {
      "title": "Introduction",
      "description": "\nIn this tutorial, we explain the most powerful data structure of Quint.\nYes, that's right, sets are the most powerful data structure.\n\nTo make the tutorial a bit more entertaining, we will help an anonymous crypto\n[Degen](https://www.coingecko.com/en/glossary/degen), who asked us to help\nwith Quint. We only know their handle\n[@KryptoCoffeeCat](https://twitter.com/KryptoCoffeeCat).\nThey want to trade a few coins over different exchanges. They have collected\nall the pairs of coins they could exchange, but this table is not easy to\nanalyze:\n\n| Coin A   | Coin B  |\n| -------- | ------- |\n| BTC      | USDC    |\n| BTC      | USDT    |\n| ETH      | USDC    |\n| ETH      | USDT    |\n| EVMOS    | USDC    |\n| EVMOS    | WETH    |\n| ETH      | WETH    |\n| ATOM     | EVMOS   |\n| ATOM     | JUNO    |\n| ATOM     | OSMO    |\n| ATOM     | JUNO    |\n| EVMOS    | JUNO    |\n| EVMOS    | OSMO    |\n\nFor example, @KryptoCoffeeCat want to know whether they could exchange BTC\nfor ATOM by doing up to three swaps. Unfortunately, @KryptoCoffeeCat have lost\naccess to their browser, as they did not update it as often as it was required.\nNow they are stuck with the\n[Quint REPL](https://github.com/informalsystems/quint/blob/main/doc/quint.md#command-repl).\nFortunately, they have found the\n[Quint cheatsheet](https://github.com/informalsystems/quint/blob/main/doc/quint-cheatsheet.pdf).\nWe will help them!\n\nIn this tutorial, you will see how to:\n \n  - use tuples,\n \n  - use sets,\n\n  - do plenty of interesting computations over sets.\n\n        \n        ",
      "line": 5,
      "file": "lesson4-sets/sets.qnt"
    },
    {
      "title": "Defining swap pairs",
      "description": "\nSince @KryptoCoffeeCat write down swap pairs in their table,\nthe most natural way of representing a row in this table is a pair.\nHence, we declare the type `Pair` as `(str, str)`. This type is a special\ncase of a tuple.\n\nIn general, tuples of the same type contain a fixed number\nof elements, which can have different types themselves.\nTuples are a very simple data structure in Quint that basically\nhas two kinds of operations:\n\n            \n\n - We can construct a tuple. For example:\n            \n>> echo '(\"BTC\", \"ETH\")' | quint\n\n\n\n - We can access a tuple element via special fields `_1`, `_2`, etc.\n   For example:\n            \n>> echo '(\"BTC\", \"ETH\")._2' | quint\n\n",
      "line": 14,
      "file": "lesson4-sets/sets.qnt"
    },
    {
      "title": "Defining available pairs",
      "description": "\nOnce we have decided to use tuples to represent the rows of the table,\nwe can define the table of all pairs as the set `availablePairs`.\n\nWould it make sense to use an array or a list instead? The answer is yes,\nprovided that our goal was to write an efficient implementation. However,\nour goal is to describe the problem in a way that is free of irrelevant\nimplementation details. In this case, the set is the best data structure:\n\n - The table of swap pairs was written in *some* order, but this order is\n   actually irrelevant. @KryptoCoffeeCat wrote the pairs in some order,\n   but they could do it differently.\n\n - The table *should not contain duplicate pairs*. If you look carefully,\n   @KryptoCoffeeCat wrote the pair `(\"ATOM\", \"JUNO\")` twice.\n   We can see that Quint removed the duplicates:\n\n            \n>> echo 'availablePairs' | quint -r ./lesson4-sets/sets.qnt::sets\n\n",
      "line": 22,
      "file": "lesson4-sets/sets.qnt"
    },
    {
      "title": "Testing set elements",
      "description": "\nThe simplest thing @KryptoCoffeeCat can do with `availablePairs` is\nto check, which pairs are in the table. For example, try the\nfollowing definitions:\n\n            \n>> echo 'hasAtomJuno' | quint -r ./lesson4-sets/sets.qnt::sets\n\n\n>> echo 'hasEvmosEth' | quint -r ./lesson4-sets/sets.qnt::sets\n\n",
      "line": 26,
      "file": "lesson4-sets/sets.qnt"
    },
    {
      "title": "Testing some elements and all elements",
      "description": "\nNow @KryptoCoffeeCat check whether they could swap Atom for some coins\nand that they cannot swap Secret for any coin:\n\n            \n>> echo 'hasAtom' | quint -r ./lesson4-sets/sets.qnt::sets\n\n\n>> echo 'missingScrt' | quint -r ./lesson4-sets/sets.qnt::sets\n\n\n\nThis works. However, @KryptoCoffeeCat notice that their definition of\n`hasAtom` was not exactly right. The definition tests only the first element\nof the pair. Actually, @KryptoCoffeeCat realize that the order of coins in\nevery pair does not matter. So we should treat the pair `(\"ATOM\", \"JUNO\")`\nto be the same as the pair `(\"JUNO\", \"ATOM\")`. But this does not work as\nexpected:\n            \n>> echo '(\"ATOM\", \"JUNO\") == (\"JUNO\", \"ATOM\")' | quint\n\n\n\nAfter a bit of thinking @KryptoCoffeeCat realizs that they already know how to\nexpress that the order of coins does not matter: Just use a set instead of a tuple.\nYes, @KryptoCoffeeCat, this is the way!\n            ",
      "line": 32,
      "file": "lesson4-sets/sets.qnt"
    },
    {
      "title": "Mapping pairs to sets",
      "description": "\nAfter having the moment of revelation @KryptoCoffeeCat, decide to redefine the\nset `availablePairs`. This time the set should contain sets like\n`Set(\"ATOM\", \"JUNO\")` instead of pairs like `(\"ATOM\", \"JUNO\")`.\n@KryptoCoffeeCat does not want to write the whole table again. So they quickly\nmap every pair `p` in `availablePairs` to the `Set(p._1, p._2)`.\n\nThe type of `availableUnorderedPairs` is `Set[Set[str]]`, that is,\na set that contains sets of strings. Will that work in Quint? @KryptoCoffeeCat's\nfriends tell them that programming languages need a bit of boilerplate like\ndefining hashes, comparators, and equality. Sets of sets work in Quint out of\nthe box:\n\n            \n>> echo 'availableUnorderedPairs' | quint -r ./lesson4-sets/sets.qnt::sets\n\n\n\nNow @KryptoCoffeeCat can fix the definition of `hasAtom`. They write down\nthe definition `hasAtomRight`. This makes them happy. Time to have a coffee!\n            ",
      "line": 38,
      "file": "lesson4-sets/sets.qnt"
    },
    {
      "title": "Filtering sets",
      "description": "\nThe next thing @KryptoCoffeeCat want to do with `availableUnorderedPairs` is\nto see, which pairs can be swapped with Atom.\nTo this end, they filter the set `availableUnorderedPairs` as in `atomPairs`:\n\n            \n>> echo 'atomPairs' | quint -r ./lesson4-sets/sets.qnt::sets\n\n\n\nThe set `atomPairs` contains only those unordered pairs that satisfy this\ncondition.\n            ",
      "line": 41,
      "file": "lesson4-sets/sets.qnt"
    },
    {
      "title": "Counting the number of elements",
      "description": "\nTo see how many swap pairs are available, @KryptoCoffeeCat\nuse the operator `size` in the definition `howMany`:\n\n            \n>> echo 'howMany' | quint -r ./lesson4-sets/sets.qnt::sets\n\n",
      "line": 44,
      "file": "lesson4-sets/sets.qnt"
    },
    {
      "title": "Flattening sets",
      "description": "\nNow @KryptoCoffeeCat wonder what kind of coins could be swapped at all.\nThis seems to be hard to figure out. Fortunately, they discover the right\noperator in the cheatsheet. It's called `flatten`:\n\n            \n>> echo 'availableUnorderedPairs.flatten()' | quint -r ./lesson4-sets/sets.qnt::sets\n\n\n\nIt is easy to see how `flatten` works by evaluating\n`availableUnorderedPairs.flatten()`. This operator computes the set\nthat contains all elements of the set's direct elements, which must be sets\nthemselves.\n            ",
      "line": 50,
      "file": "lesson4-sets/sets.qnt"
    },
    {
      "title": "Reachability via one or two swaps",
      "description": "\n@KryptoCoffeeCat are a bit tired of this tutorial. Their real goal is to find\nthe coins that could be bought by one or two swaps. This sounds hard but it\nis not.\n\nHow to find, whether a pair from `availableUnorderedPairs` involves a\ncoin from `someCoins`? For example, assume that we have an unordered pair\n`Set(\"ATOM\", \"EVMOS\")` and a set `someCoinsExample` that is defined as\n`Set(\"ATOM\", \"ETH\", \"USDT\")`.\nSince `Set(\"ATOM\", \"EVMOS\")` is a two-element set,\nit's easy: We compute the intersection of `Set(\"ATOM\", \"EVMOS\")`\nand `someCoinsExample`. If the pair involves a coin from\n`someCoinsExample`, such an intersection should contain exactly\none coin. Let's check that:\n\n            \n>> echo 'Set(\"ATOM\", \"EVMOS\").intersect(someCoinsExample)' | quint -r ./lesson4-sets/sets.qnt::sets\n\n\n\nThis works, so @KryptoCoffeeCat filter the whole set of `availableUnorderedPairs`\nwith the following condition:\n            \n>> echo 'availableUnorderedPairs.filter(p => p.intersect(someCoinsExample).size() == 1)' | quint -r ./lesson4-sets/sets.qnt::sets\n\n\n\nHowever, there is a small issue: The result has the type of a set of two-element\nsets (of strings), whereas they need a set of strings (coins).\n@KryptoCoffeeCat already know how to solve this problem, by calling `flatten()`:\n            \n>> echo 'availableUnorderedPairs.filter(p => p.intersect(someCoinsExample).size() == 1).flatten()' | quint -r ./lesson4-sets/sets.qnt::sets\n\n\n\nFinally, they do not need the coins that they started with, that is, `someCoinsExample`.\nHence, they add `exclude(someCoinsExample)` to the result. The complete\ndefinition is written in `buyableVia1Swap`.\n\n@KryptoCoffeeCat want to see how this actually works. So they try:\n            \n>> echo 'buyableVia1Swap(Set(\"ATOM\"))' | quint -r ./lesson4-sets/sets.qnt::sets\n\n\n\nThis seems to work!\n\nNow @KryptoCoffeeCat want to see what is possible to buy by doing exactly two\nswaps. This is also easy: Just call `buyableVia1Swap` twice. This works:\n            \n>> echo 'buyableVia2Swaps(Set(\"ATOM\"))' | quint -r ./lesson4-sets/sets.qnt::sets\n\n\n\nAnd how would they find out what could be bought by one or two swaps?\nAlso easy: Just take the set union of what is possible in one or two swaps:            \n            \n>> echo 'buyableVia1or2Swaps(Set(\"ATOM\"))' | quint -r ./lesson4-sets/sets.qnt::sets\n\n",
      "line": 71,
      "file": "lesson4-sets/sets.qnt"
    },
    {
      "title": "Reachability via multiple swaps",
      "description": "\n@KryptoCoffeeCat want to know how to find the coins that could be bought\nafter a given number of swaps, not just 1 or 2. This is also quite easy.\nFirst, we have to understand how to iterate over numbers 1, 2, ..., n.\nThere are several ways to do that in Quint. Since we are talking about sets\nin this tutorial, we will see how to do that using sets.\n\nQuint has the operator `i.to(j)` that constructs the set `Set(i, ..., j)`.\nLet's try it:\n\n            \n>> echo '3.to(10)' | quint\n\n\n\nNow @KryptoCoffeeCat want to write something like this in pseudo JavaScript:\n\n```js\nvar prevCoins = someCoins\nfor (let i = 0; i < n; i++) {\n  prevCoins = buyableVia1Swap(prevCoins)\n}\n// use prevCoins\n```\n\n@KryptoCoffeeCat find a blog post on medium.com about\n[Exploring folds](https://medium.com/@zaid.naom/exploring-folds-a-powerful-pattern-of-functional-programming-3036974205c8)\nin JavaScript. It happens that Quint supports exactly this pattern, though it\nhas a slightly different syntax:\n\n```bluespec\n1.to(n)\n .fold(someCoins,\n       (prevCoins, i) => buyableVia1Swap(prevCoins))\n```\n\nThe above expression iterates over the set `1.to(n)` in *some order*\nand passes the previously computed value as the first argument `prevCoins`\nand a set element as the second argument `i`. It's important that the order\nof iteration is not known in advance. However, it does not matter here, as we\nare not even using `i`. @KryptoCoffeeCat could even have written `_`\ninstead of `i` in the above expression, which would indicate that the second\nargument is not used:\n\n```bluespec\n1.to(n)\n .fold(someCoins,\n       (prevCoins, _) => buyableVia1Swap(prevCoins))\n```\n\nNow @KryptoCoffeeCat can compute what they can buy via various numbers of swaps:\n            \n>> echo 'buyableNSwaps(Set(\"ATOM\"), 3)' | quint -r ./lesson4-sets/sets.qnt::sets\n\n\n>> echo 'buyableNSwaps(Set(\"ATOM\"), 4)' | quint -r ./lesson4-sets/sets.qnt::sets\n\n\n>> echo 'buyableNSwaps(Set(\"ATOM\"), 5)' | quint -r ./lesson4-sets/sets.qnt::sets\n\n",
      "line": 76,
      "file": "lesson4-sets/sets.qnt"
    },
    {
      "title": "Power to the folds!",
      "description": "\nWhen @KryptoCoffeeCat decided to learn a bit more about `fold`, they have found\nthat this operator is quite powerful. For instance, they could write their\nown versions of `exists`, `forall`, `filter`, `map`, and `flatten`.\nDoes it mean that they should use `fold` everywhere now? Better not.\nAlthough folds can express a lot of things, they should be used when really\nrequired. After all, `exists`, `forall`, `filter`, `map`, `flatten`\nare much easier to read.\n        ",
      "line": 99,
      "file": "lesson4-sets/sets.qnt"
    },
    {
      "title": "Computing cycles with powersets",
      "description": "\nOK, here is a real challenge for @KryptoCoffeeCat! Can they find four pairs\nthat could be swapped in some order, so the sequence of swaps starts with\none coin and ends with the same coin? Degens love swap cycles!\n\nTo do that, they first write `availableUnorderedPairs.powerset()`, which\nblasts `availableUnorderedPairs` into a huge set that contains all combinations\nof pairs. These sets have all possible sizes. @KryptoCoffeeCat filter out the\nsets that are not quadruples. How many quadruples are there? Let's see:\n\n            \n>> echo 'quads.size()' | quint -r ./lesson4-sets/sets.qnt::sets\n\n\n\nPhew. It will take @KryptoCoffeeCat hours to analyze all these pairs by hand.\nHow do we know that some pairs form a cycle? Let's have a look at an example:\n\n| Coin A   | Coin B  |\n| -------- | ------- |\n| JUNO     | ATOM    |\n| ATOM     | OSMO    |\n| OSMO     | EVMOS   |\n| EVMOS    | JUNO    |\n\nThere is an interesting property here. Every coin appears exactly twice in\nthe above set. By browsing [Wikipedia](https://en.wikipedia.org/wiki/Main_Page),\n@KryptoCoffeeCat found that a slightly more general observation was made by\nLeonard Euler about 300 years ago, when he analyzed\n[the bridges of K\u00f6nigsberg](https://en.wikipedia.org/wiki/Seven_Bridges_of_K%C3%B6nigsberg).\nNot bad, @KryptoCoffeeCat!\n\nAfter figuring out the cycles, @KryptoCoffeeCat write the predicate `isCycle`\nand finally the definition `cycles4`. Now they compute all these cycles in a\nsingle click:\n            \n>> echo 'cycles4' | quint -r ./lesson4-sets/sets.qnt::sets\n\n",
      "line": 119,
      "file": "lesson4-sets/sets.qnt"
    },
    {
      "title": "Conclusions",
      "description": "\n\n@KryptoCoffeeCat has learned a lot in this tutorial.\nBy looking at the\n[Quint cheatsheet](https://github.com/informalsystems/quint/blob/main/doc/quint-cheatsheet.pdf),\nthey have found that this tutorial did not cover two operators on sets.\nCan you find them too?\n\nIf you are writing code in programming languages such as JavaScript, Rust,\nGolang, Java, Python, and similar, sets may be not your everyday data\nstructure (such as arrays and lists), though there is a good chance that you\nhave used sets before. In Quint, it's the opposite. If there is a problem,\nthen sets are most likely there to solve it. If not, you can use maps or lists,\nwhich will be explained in follow up tutorials.\n\n        ",
      "line": 120,
      "file": "lesson4-sets/sets.qnt"
    }
  ]
}